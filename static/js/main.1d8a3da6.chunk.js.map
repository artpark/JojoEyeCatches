{"version":3,"sources":["assets/images/Josuke.png","assets/images/SoftAndWet.png","components/SoftAndWetPage/SoftAndWetPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","calc","x","y","window","innerWidth","innerHeight","trans1","trans2","SoftAndWetPage","useSpring","xy","config","mass","tension","friction","props","set","className","onMouseMove","clientX","clientY","lang","div","style","transform","interpolate","alt","src","SoftAndWet","Josuke","id","width","height","numOctaves","seed","baseFrequency","type","scale","in","xlinkHref","attributeName","dur","keyTimes","values","repeatCount","App","Fragment","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,sLCMrCC,EAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAIE,OAAOC,WAAa,EAAGF,EAAIC,OAAOE,YAAc,IACtEC,EAAS,SAACL,EAAGC,GAAJ,4BAAyBD,EAAI,GAA7B,cAAqCC,EAAI,GAAzC,UACTK,EAAS,SAACN,EAAGC,GAAJ,4BAAyBD,EAAI,EAA7B,cAAoCC,EAAI,EAAxC,UA0DAM,EAvDQ,WAAO,IAAD,EACNC,aAAU,iBAAO,CACpCC,GAAI,CAAC,EAAG,GACRC,OAAQ,CAAEC,KAAM,GAAIC,QAAS,IAAKC,SAAU,SAHnB,mBACpBC,EADoB,KACbC,EADa,KAM3B,OACE,yBACEC,UAAU,oBACVC,YAAa,gBAAYjB,EAAZ,EAAGkB,QAAqBjB,EAAxB,EAAekB,QAAf,OAAgCJ,EAAI,CAAEN,GAAIV,EAAKC,EAAGC,OAE/D,wBAAIe,UAAU,QAAQI,KAAK,MACxB,iDAEH,kBAAC,IAASC,IAAV,CACEL,UAAU,YACVM,MAAO,CAAEC,UAAWT,EAAML,GAAGe,YAAYnB,KAEzC,yBAAKoB,IAAI,aAAaC,IAAKC,IAAYX,UAAU,kBAEnD,kBAAC,IAASK,IAAV,CACEL,UAAU,YACVM,MAAO,CAAEC,UAAWT,EAAML,GAAGe,YAAYlB,KAEzC,yBAAKmB,IAAI,SAASC,IAAKE,IAAQZ,UAAU,WACzC,yBAAKA,UAAU,UACb,6BACE,4BAAQa,GAAG,aAAa7B,EAAE,IAAIC,EAAE,IAAI6B,MAAM,OAAOC,OAAO,QACtD,kCACEF,GAAG,gBACHG,WAAW,IACXC,KAAK,IACLC,cAAc,YACdC,KAAK,iBAEP,uCACEC,MAAM,KACNC,GAAG,mBAGP,6BACEC,UAAU,iBACVC,cAAc,gBACdC,IAAI,MACJC,SAAS,UACTC,OAAO,2BACPC,YAAY,oBCjDXC,EAJH,WACV,OAAO,kBAAC,IAAMC,SAAP,KAAiBtC,MCONuC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d8a3da6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Josuke.8b27ec0b.png\";","module.exports = __webpack_public_path__ + \"static/media/SoftAndWet.6c5e51d8.png\";","import React from 'react'\r\nimport { useSpring, animated } from 'react-spring'\r\n\r\nimport Josuke from '../../assets/images/Josuke.png'\r\nimport SoftAndWet from '../../assets/images/SoftAndWet.png'\r\n\r\nconst calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2]\r\nconst trans1 = (x, y) => `translate3d(${x / 10}px,${y / 10}px,0)`\r\nconst trans2 = (x, y) => `translate3d(${x / 7}px,${y / 7}px,0)`\r\nconst trans3 = (x, y) => `translate3d(${x / 12}px,${y / 12}px,0)`\r\n\r\nconst SoftAndWetPage = () => {\r\n  const [props, set] = useSpring(() => ({\r\n    xy: [0, 0],\r\n    config: { mass: 10, tension: 550, friction: 140 },\r\n  }))\r\n\r\n  return (\r\n    <div\r\n      className=\"soft-and-wet-page\"\r\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}\r\n    >\r\n      <h1 className=\"title\" lang=\"ja\">\r\n        {'ソフト & ウェット'}\r\n      </h1>\r\n      <animated.div\r\n        className=\"container\"\r\n        style={{ transform: props.xy.interpolate(trans1) }}\r\n      >\r\n        <img alt=\"SoftAndWet\" src={SoftAndWet} className=\"soft-and-wet\" />\r\n      </animated.div>\r\n      <animated.div\r\n        className=\"container\"\r\n        style={{ transform: props.xy.interpolate(trans2) }}\r\n      >\r\n        <img alt=\"Josuke\" src={Josuke} className=\"josuke\"></img>\r\n        <div className=\"collar\">\r\n          <svg>\r\n            <filter id=\"turbulence\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\r\n              <feTurbulence\r\n                id=\"collar-filter\"\r\n                numOctaves=\"3\"\r\n                seed=\"2\"\r\n                baseFrequency=\"0.00 0.01\"\r\n                type=\"fractalNoise\"\r\n              ></feTurbulence>\r\n              <feDisplacementMap\r\n                scale=\"20\"\r\n                in=\"SourceGraphic\"\r\n              ></feDisplacementMap>\r\n            </filter>\r\n            <animate\r\n              xlinkHref=\"#collar-filter\"\r\n              attributeName=\"baseFrequency\"\r\n              dur=\"60s\"\r\n              keyTimes=\"0;0.5;1\"\r\n              values=\"0.0 0.0;0.0 0.03;0.0 0.0\"\r\n              repeatCount=\"indefinite\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </animated.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SoftAndWetPage\r\n","import React from 'react'\r\n\r\nimport SoftAndWetPage from './components/SoftAndWetPage/SoftAndWetPage'\r\n\r\nconst App = () => {\r\n  return <React.Fragment>{SoftAndWetPage()}</React.Fragment>\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './assets/styles/index.scss'\n\nimport App from './App'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}